<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.6.4</version>
		<relativePath /> <!-- lookup parent from repository -->
	</parent>

	<groupId>com.apba.proas</groupId>
	<artifactId>proas-backend</artifactId>
	<version>1</version>

	<name>proas-backend-prototype</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>11</java.version>
		<spring-cloud.version>2021.0.1</spring-cloud.version>
        <maven.compiler.release>11</maven.compiler.release>
	</properties>

	<dependencies>
		<!-- tomar proyectos una vez instalados en eel repositorio local 
		<dependency>
			<groupId>com.apba.proas</groupId>
			<artifactId>proas-model</artifactId>
			<version>1.0-SNAPSHOT</version>
		</dependency>
		-->
		
		<!-- <dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>1.7.36</version> 
		</dependency> -->

		<!-- Trazabilidd de peticiones: Tracer=grupo correlacionado de peticion svcs. Span=cada peticion. @NewSpan('')-->
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-sleuth</artifactId>
		</dependency>
	<!-- zipkin is a distributed tracing system e.g. Zipki par usar con Sleuth y capturar los Tracer y los Spans
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-sleuth-zipkin</artifactId>
		</dependency>
	-->
	<!-- Uso del WebClient en lugar del RestTemplate -->
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-webflux</artifactId>
	</dependency>
	<!-- <dependency>
		<groupId>org.projectreactor</groupId>
		<artifactId>reactor-spring</artifactId>
		<version>1.0.1.RELEASE</version>
	</dependency> -->

	<!-- JSON web token 
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>	
	-->
	
		<!-- - HTTP headers received at Spring MVC controllers
			 - Apache Kafka or RabbitMQ (or any other Spring Cloud Stream binder
			 - requests that pass through a Netflix Zuul microproxy
			 - requests that pass through a Netflix Zuul microproxy
			-->

		<!-- RESTful applications using Spring MVC. It uses Tomcats-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<!-- debug: hacer que el servidor se recompile cuando cambias algo -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<!-- Metadatos de Configuration para clases anotadas con @ConfigurationProperties, p.ej. @Required 
			It scans the libraries in the build and sees what properties they use so as to inform the IDE
		-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-configuration-processor</artifactId>
			<version>2.1.6.RELEASE</version>
			<optional>true</optional>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.google.code.gson/gson -->
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<version>2.10</version>
		</dependency>

		<!-- Hacer tests en Spring o JUnit4 -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<!-- Actuator para interaccionar con el Spring que se está ejecutando o monitorizarlo con JMX -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>
		</dependency>

	<!-- spring-cloud-starter-config para buscar en GIT una estructura de {application}-{profile}.properties
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-config</artifactId>
		</dependency>
	-->
	<!-- Inyecta patrones de Service Discovery (Eureka), Circuit Breaker (Hystrix), Intelligent Routing (Zuul) and Client Side Load Balancing (Ribbon)
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
		</dependency>
	-->
	<!-- generar listas aleatorias
		<dependency>
			<groupId>com.github.javafaker</groupId>
			<artifactId>javafaker</artifactId>
			<version>1.0.2</version>
		</dependency>
	-->
	<!-- Deprecated -añadir spring.config.import=xxx en application.properties
		<dependency>
			<groupId>org.springframework.cloud</groupId>
			<artifactId>spring-cloud-starter-bootstrap</artifactId>
		</dependency>
	-->
	<!-- Fachada para monitorizar con Prometheus
		<dependency>
			<groupId>io.micrometer</groupId>
			<artifactId>micrometer-registry-prometheus</artifactId>
			<scope>runtime</scope>
		</dependency>
	--> 
		<!-- https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api -->
		<!-- <dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
			<version>5.9.1</version>
			<scope>test</scope>
		</dependency> -->
	</dependencies>
	<dependencyManagement>
		<dependencies>
			<dependency>
				<groupId>org.springframework.cloud</groupId>
				<artifactId>spring-cloud-dependencies</artifactId>
				<version>${spring-cloud.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
			
		</plugins>
	</build>

</project>
